# 워크플로우의 이름
name: Spring Boot CI/CD Pipeline

# 파이프라인 실행 조건: main 브랜치에 push 이벤트가 발생했을 때
on:
  push:
    branches: [ "main" ]

# 실행될 작업(Job) 정의
jobs:
  build-and-deploy:
    # 작업이 실행될 가상 머신 환경
    runs-on: ubuntu-latest

    # 작업의 각 단계(Step)
    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. JDK 17 설정 (Gradle 빌드를 위해 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Docker Hub 로그인 설정
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPO }}:${{ github.sha }}, ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest

      # 6. 배포 서버에 접속하여 새 컨테이너 실행 (Deploy)
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # 기존에 실행 중인 컨테이너가 있다면 중지 및 제거
            docker stop firefly-server || true
            docker rm firefly-server || true
            
            # Docker Hub에서 방금 푸시한 최신 이미지 받아오기
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
            
            # 새 이미지로 컨테이너 실행 (포트 매핑: 서버 80 -> 컨테이너 8080)
            docker run -d -p 8080:8080 --name firefly-server ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest